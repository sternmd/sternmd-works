"use strict";$(function(){$(".yinyang").on("click",function(e){e.preventDefault(),$("body").toggleClass("invert")})}),$(function(){$("html").niceScroll(),$(this).scrollTop(0);var t=$("#projects").offset().top-50;$(window).scroll(function(){var e=$(window).scrollTop(),a=$(".arrow");t<e?a.addClass("down").find("a").attr("href","#hero"):a.removeClass("down").find("a").attr("href","#projects")}),$('a[href*="#"]').not('[href="#"]').not('[href="#0"]').click(function(e){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var a=$(this.hash);(a=a.length?a:$("[name="+this.hash.slice(1)+"]")).length&&(e.preventDefault(),$("html, body").animate({scrollTop:a.offset().top},1e3,function(){var e=$(a);if(e.focus(),e.is(":focus"))return!1;e.attr("tabindex","-1"),e.focus()}))}})}),$(function(){window.onload=function(){var e=new TimelineLite,a=$(".gradient"),t=$("#circle svg, .yinyang"),o=$("#about"),n=$(".burger-check, .burger, .arrow"),s=$("html, body");TweenLite.delayedCall(.25,function(){e.set(n,{className:"+=no-click"}).set(t,{className:"+=no-click"}).set(s,{className:"+=no-scroll"}).to(a,1,{height:"100%",ease:Quad.easeInOut}).to(t,.75,{opacity:1,ease:Quad.easeIn}).to(t,.5,{ease:Quad.easeIn,delay:1}).to(o,.25,{opacity:1,ease:Quad.easeIn}).to(a,.75,{height:12,ease:Quad.easeInOut}).to(n,.5,{opacity:1,ease:Quad.easeIn}).set(n,{className:"-=no-click"}).set(s,{className:"-=no-scroll"}).set(t,{className:"-=no-click"})})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJzY3JvbGwuanMiLCJ0aW1lbGluZS5qcyJdLCJuYW1lcyI6WyIkIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDbGFzcyIsIm5pY2VTY3JvbGwiLCJ0aGlzIiwic2Nyb2xsVG9wIiwib2Zmc2V0VG9wIiwib2Zmc2V0IiwidG9wIiwid2luZG93Iiwic2Nyb2xsIiwiYXJyb3dJY29uIiwiYWRkQ2xhc3MiLCJmaW5kIiwiYXR0ciIsInJlbW92ZUNsYXNzIiwibm90IiwiY2xpY2siLCJldmVudCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiaG9zdG5hbWUiLCJ0YXJnZXQiLCJoYXNoIiwibGVuZ3RoIiwic2xpY2UiLCJhbmltYXRlIiwiJHRhcmdldCIsImZvY3VzIiwiaXMiLCJvbmxvYWQiLCJ0bCIsIlRpbWVsaW5lTGl0ZSIsImdyYWRpZW50IiwiY2lyY2xlIiwiaGVybyIsIm5hdiIsImJvZHkiLCJUd2VlbkxpdGUiLCJkZWxheWVkQ2FsbCIsInNldCIsImNsYXNzTmFtZSIsInRvIiwiaGVpZ2h0IiwiZWFzZSIsIlF1YWQiLCJlYXNlSW5PdXQiLCJvcGFjaXR5IiwiZWFzZUluIiwiZGVsYXkiXSwibWFwcGluZ3MiOiJhQUFBQSxFQUFFLFdBQUFBLEVBQUEsWUFBV0MsR0FBQSxRQUFBLFNBQUFDLEdBR1RBLEVBQUVDLGlCQURGSCxFQUFBLFFBQUZJLFlBQUEsY0NGRkosRUFBRSxXQUVFQSxFQUFFLFFBQVFLLGFBQ1ZMLEVBQUVNLE1BQU1DLFVBQVUsR0FFbEIsSUFBSUMsRUFBWVIsRUFBRSxhQUFhUyxTQUFTQyxJQUFNLEdBRTlDVixFQUFFVyxRQUFRQyxPQUFPLFdBQ2IsSUFBSUwsRUFBWVAsRUFBRVcsUUFBUUosWUFDdEJNLEVBQVliLEVBQUUsVUFFRlEsRUFBWkQsRUFDQU0sRUFBVUMsU0FBUyxRQUNkQyxLQUFLLEtBQ0xDLEtBQUssT0FBUSxTQUVsQkgsRUFBVUksWUFBWSxRQUNqQkYsS0FBSyxLQUNMQyxLQUFLLE9BQVEsZUFLMUJoQixFQUFFLGdCQUVHa0IsSUFBSSxjQUNKQSxJQUFJLGVBQ0pDLE1BQU0sU0FBU0MsR0FFWixHQUNJQyxTQUFTQyxTQUFTQyxRQUFRLE1BQU8sS0FBT2pCLEtBQUtnQixTQUFTQyxRQUFRLE1BQU8sS0FBT0YsU0FBU0csVUFBWWxCLEtBQUtrQixTQUN4RyxDQUVFLElBQUlDLEVBQVN6QixFQUFFTSxLQUFLb0IsT0FDcEJELEVBQVNBLEVBQU9FLE9BQVNGLEVBQVN6QixFQUFFLFNBQVdNLEtBQUtvQixLQUFLRSxNQUFNLEdBQUssTUFFekRELFNBRVBQLEVBQU1qQixpQkFDTkgsRUFBRSxjQUFjNkIsUUFBUSxDQUNwQnRCLFVBQVdrQixFQUFPaEIsU0FBU0MsS0FDNUIsSUFBTSxXQUdMLElBQUlvQixFQUFVOUIsRUFBRXlCLEdBRWhCLEdBREFLLEVBQVFDLFFBQ0pELEVBQVFFLEdBQUcsVUFDWCxPQUFPLEVBRVBGLEVBQVFkLEtBQUssV0FBWSxNQUN6QmMsRUFBUUMsZ0JDbERwQy9CLEVBQUUsV0FFQVcsT0FBT3NCLE9BQVMsV0FFZCxJQUFJQyxFQUFLLElBQUlDLGFBRVRDLEVBQVdwQyxFQUFFLGFBQ2JxQyxFQUFTckMsRUFBRSx5QkFDWHNDLEVBQU90QyxFQUFFLFVBQ1R1QyxFQUFNdkMsRUFBRSxrQ0FDUndDLEVBQU94QyxFQUFFLGNBa0RieUMsVUFBVUMsWUFBWSxJQTlDdEIsV0FDSVIsRUFDS1MsSUFBSUosRUFBSyxDQUNOSyxVQUFXLGVBRWRELElBQUlOLEVBQVEsQ0FDVE8sVUFBVyxlQUVkRCxJQUFJSCxFQUFNLENBQ1BJLFVBQVcsZ0JBRWRDLEdBQUdULEVBQVUsRUFBRyxDQUNiVSxPQUFRLE9BQ1JDLEtBQU1DLEtBQUtDLFlBRWRKLEdBQUdSLEVBQVEsSUFBTSxDQUNkYSxRQUFTLEVBQ1RILEtBQU1DLEtBQUtHLFNBRWROLEdBQUdSLEVBQVEsR0FBSyxDQUNiVSxLQUFNQyxLQUFLRyxPQUNYQyxNQUFPLElBRVZQLEdBQUdQLEVBQU0sSUFBTSxDQUNaWSxRQUFTLEVBQ1RILEtBQU1DLEtBQUtHLFNBRWROLEdBQUdULEVBQVUsSUFBTSxDQUNoQlUsT0FBUSxHQUNSQyxLQUFNQyxLQUFLQyxZQUVkSixHQUFHTixFQUFLLEdBQUssQ0FDVlcsUUFBUyxFQUNUSCxLQUFNQyxLQUFLRyxTQUVkUixJQUFJSixFQUFLLENBQ05LLFVBQVcsZUFFZEQsSUFBSUgsRUFBTSxDQUNQSSxVQUFXLGdCQUVkRCxJQUFJTixFQUFRLENBQ1RPLFVBQVciLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKGZ1bmN0aW9uKCkge1xuXG4gICQoJy55aW55YW5nJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICQoJ2JvZHknKS50b2dnbGVDbGFzcygnaW52ZXJ0Jyk7XG4gIH0pO1xuXG59KTtcbiIsIiQoZnVuY3Rpb24oKSB7XG5cbiAgICAkKCdodG1sJykubmljZVNjcm9sbCgpO1xuICAgICQodGhpcykuc2Nyb2xsVG9wKDApO1xuXG4gICAgdmFyIG9mZnNldFRvcCA9ICQoJyNwcm9qZWN0cycpLm9mZnNldCgpLnRvcCAtIDUwO1xuXG4gICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcbiAgICAgICAgdmFyIGFycm93SWNvbiA9ICQoJy5hcnJvdycpO1xuXG4gICAgICAgIGlmIChzY3JvbGxUb3AgPiBvZmZzZXRUb3ApIHtcbiAgICAgICAgICAgIGFycm93SWNvbi5hZGRDbGFzcygnZG93bicpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2EnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJywgJyNoZXJvJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJvd0ljb24ucmVtb3ZlQ2xhc3MoJ2Rvd24nKVxuICAgICAgICAgICAgICAgIC5maW5kKCdhJylcbiAgICAgICAgICAgICAgICAuYXR0cignaHJlZicsICcjcHJvamVjdHMnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2VsZWN0IGFsbCBsaW5rcyB3aXRoIGhhc2hlc1xuICAgICQoJ2FbaHJlZio9XCIjXCJdJylcbiAgICAgICAgLy8gUmVtb3ZlIGxpbmtzIHRoYXQgZG9uJ3QgYWN0dWFsbHkgbGluayB0byBhbnl0aGluZ1xuICAgICAgICAubm90KCdbaHJlZj1cIiNcIl0nKVxuICAgICAgICAubm90KCdbaHJlZj1cIiMwXCJdJylcbiAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBPbi1wYWdlIGxpbmtzXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sICcnKSA9PSB0aGlzLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCAnJykgJiYgbG9jYXRpb24uaG9zdG5hbWUgPT0gdGhpcy5ob3N0bmFtZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlndXJlIG91dCBlbGVtZW50IHRvIHNjcm9sbCB0b1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMuaGFzaCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lmxlbmd0aCA/IHRhcmdldCA6ICQoJ1tuYW1lPScgKyB0aGlzLmhhc2guc2xpY2UoMSkgKyAnXScpO1xuICAgICAgICAgICAgICAgIC8vIERvZXMgYSBzY3JvbGwgdGFyZ2V0IGV4aXN0P1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcHJldmVudCBkZWZhdWx0IGlmIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBnb25uYSBoYXBwZW5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiB0YXJnZXQub2Zmc2V0KCkudG9wXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2sgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNdXN0IGNoYW5nZSBmb2N1cyFcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0YXJnZXQuaXMoXCI6Zm9jdXNcIikpIHsgLy8gQ2hlY2tpbmcgaWYgdGhlIHRhcmdldCB3YXMgZm9jdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldC5hdHRyKCd0YWJpbmRleCcsICctMScpOyAvLyBBZGRpbmcgdGFiaW5kZXggZm9yIGVsZW1lbnRzIG5vdCBmb2N1c2FibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LmZvY3VzKCk7IC8vIFNldCBmb2N1cyBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG59KTtcbiIsIiQoZnVuY3Rpb24oKSB7XG5cbiAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lTGl0ZSgpO1xuXG4gICAgdmFyIGdyYWRpZW50ID0gJChcIi5ncmFkaWVudFwiKSxcbiAgICAgICAgY2lyY2xlID0gJChcIiNjaXJjbGUgc3ZnLCAueWlueWFuZ1wiKSxcbiAgICAgICAgaGVybyA9ICQoXCIjYWJvdXRcIiksXG4gICAgICAgIG5hdiA9ICQoXCIuYnVyZ2VyLWNoZWNrLCAuYnVyZ2VyLCAuYXJyb3dcIiksXG4gICAgICAgIGJvZHkgPSAkKFwiaHRtbCwgYm9keVwiKTtcblxuICAgIC8vIFR3ZWVuTGl0ZS5sYWdTbW9vdGhpbmcoMTAwMCwgMTYpO1xuXG4gICAgZnVuY3Rpb24gaW50cm8oKSB7XG4gICAgICAgIHRsXG4gICAgICAgICAgICAuc2V0KG5hdiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCIrPW5vLWNsaWNrXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2V0KGNpcmNsZSwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCIrPW5vLWNsaWNrXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2V0KGJvZHksIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiKz1uby1zY3JvbGxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50byhncmFkaWVudCwgMSwge1xuICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgZWFzZTogUXVhZC5lYXNlSW5PdXRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudG8oY2lyY2xlLCAwLjc1LCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBlYXNlOiBRdWFkLmVhc2VJblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50byhjaXJjbGUsIDAuNSwge1xuICAgICAgICAgICAgICAgIGVhc2U6IFF1YWQuZWFzZUluLFxuICAgICAgICAgICAgICAgIGRlbGF5OiAxXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRvKGhlcm8sIDAuMjUsIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIGVhc2U6IFF1YWQuZWFzZUluXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRvKGdyYWRpZW50LCAwLjc1LCB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMixcbiAgICAgICAgICAgICAgICBlYXNlOiBRdWFkLmVhc2VJbk91dFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50byhuYXYsIDAuNSwge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgZWFzZTogUXVhZC5lYXNlSW5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2V0KG5hdiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCItPW5vLWNsaWNrXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2V0KGJvZHksIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiLT1uby1zY3JvbGxcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zZXQoY2lyY2xlLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIi09bm8tY2xpY2tcIlxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMjUsIGludHJvKTtcblxuICB9O1xuXG59KTtcbiJdfQ==
